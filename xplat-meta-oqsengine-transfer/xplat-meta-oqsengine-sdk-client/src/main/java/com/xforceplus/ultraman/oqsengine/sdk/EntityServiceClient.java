
// Generated by Akka gRPC. DO NOT EDIT.
package com.xforceplus.ultraman.oqsengine.sdk;

import akka.grpc.GrpcClientSettings;
import akka.grpc.internal.ClientState;
import akka.grpc.internal.JavaUnaryRequestBuilder;
import akka.grpc.internal.NettyClientUtils;
import akka.grpc.internal.ProtoMarshaller;
import akka.grpc.javadsl.AkkaGrpcClient;
import akka.grpc.javadsl.SingleResponseRequestBuilder;
import akka.stream.ActorMaterializer;
import akka.stream.Materializer;
import io.grpc.ManagedChannel;
import io.grpc.MethodDescriptor;
import scala.concurrent.ExecutionContext;

import static com.xforceplus.ultraman.oqsengine.sdk.EntityService.Serializers.*;


public abstract class EntityServiceClient extends EntityServiceClientPowerApi implements EntityService, AkkaGrpcClient {
  public static final EntityServiceClient create(GrpcClientSettings settings, Materializer mat, ExecutionContext ec) {
    return new DefaultEntityServiceClient(settings, mat, ec);
  }

  protected final static class DefaultEntityServiceClient extends EntityServiceClient {

      private final ClientState clientState;
      private final GrpcClientSettings settings;
      private final io.grpc.CallOptions options;
      private final Materializer mat;
      private final ExecutionContext ec;

      private DefaultEntityServiceClient(GrpcClientSettings settings, Materializer mat, ExecutionContext ec) {
        this.settings = settings;
        this.mat = mat;
        this.ec = ec;
        this.clientState = new ClientState(
          settings,
          // TODO #733 remove cast once we update Akka
          akka.event.Logging$.MODULE$.apply(((ActorMaterializer)mat).system(), DefaultEntityServiceClient.class, akka.event.LogSource$.MODULE$.<DefaultEntityServiceClient>fromAnyClass()),
          mat,
          ec);
        this.options = NettyClientUtils.callOptions(settings);

        if (mat instanceof ActorMaterializer) {
          ((ActorMaterializer) mat).system().getWhenTerminated().whenComplete((v, e) -> close());
        }
      }

  
    
      private final SingleResponseRequestBuilder<TransactionUp, OperationResult> beginRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(beginDescriptor, channel, options, settings, ec);
      }



      private final SingleResponseRequestBuilder<EntityUp, OperationResult> buildRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(buildDescriptor, channel, options, settings, ec);
      }



      private final SingleResponseRequestBuilder<EntityUp, OperationResult> replaceRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(replaceDescriptor, channel, options, settings, ec);
      }



      private final SingleResponseRequestBuilder<EntityUp, OperationResult> removeRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(removeDescriptor, channel, options, settings, ec);
      }



      private final SingleResponseRequestBuilder<EntityUp, OperationResult> selectOneRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(selectOneDescriptor, channel, options, settings, ec);
      }



      private final SingleResponseRequestBuilder<SelectByCondition, OperationResult> selectByConditionsRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(selectByConditionsDescriptor, channel, options, settings, ec);
      }



      private final SingleResponseRequestBuilder<TransactionUp, OperationResult> commitRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(commitDescriptor, channel, options, settings, ec);
      }



      private final SingleResponseRequestBuilder<TransactionUp, OperationResult> rollBackRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(rollBackDescriptor, channel, options, settings, ec);
      }





        /**
         * For access to method metadata use the parameterless version of begin
         */
        public java.util.concurrent.CompletionStage<OperationResult> begin(TransactionUp request) {
          return begin().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer begin(com.xforceplus.ultraman.oqsengine.sdk.TransactionUp) if possible.
         */

          public SingleResponseRequestBuilder<TransactionUp, OperationResult> begin()

        {
          return clientState.withChannel( this::beginRequestBuilder);
        }


        /**
         * For access to method metadata use the parameterless version of build
         */
        public java.util.concurrent.CompletionStage<OperationResult> build(EntityUp request) {
          return build().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer build(com.xforceplus.ultraman.oqsengine.sdk.EntityUp) if possible.
         */

          public SingleResponseRequestBuilder<EntityUp, OperationResult> build()

        {
          return clientState.withChannel( this::buildRequestBuilder);
        }


        /**
         * For access to method metadata use the parameterless version of replace
         */
        public java.util.concurrent.CompletionStage<OperationResult> replace(EntityUp request) {
          return replace().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer replace(com.xforceplus.ultraman.oqsengine.sdk.EntityUp) if possible.
         */

          public SingleResponseRequestBuilder<EntityUp, OperationResult> replace()

        {
          return clientState.withChannel( this::replaceRequestBuilder);
        }


        /**
         * For access to method metadata use the parameterless version of remove
         */
        public java.util.concurrent.CompletionStage<OperationResult> remove(EntityUp request) {
          return remove().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer remove(com.xforceplus.ultraman.oqsengine.sdk.EntityUp) if possible.
         */

          public SingleResponseRequestBuilder<EntityUp, OperationResult> remove()

        {
          return clientState.withChannel( this::removeRequestBuilder);
        }


        /**
         * For access to method metadata use the parameterless version of selectOne
         */
        public java.util.concurrent.CompletionStage<OperationResult> selectOne(EntityUp request) {
          return selectOne().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer selectOne(com.xforceplus.ultraman.oqsengine.sdk.EntityUp) if possible.
         */

          public SingleResponseRequestBuilder<EntityUp, OperationResult> selectOne()

        {
          return clientState.withChannel( this::selectOneRequestBuilder);
        }


        /**
         * For access to method metadata use the parameterless version of selectByConditions
         */
        public java.util.concurrent.CompletionStage<OperationResult> selectByConditions(SelectByCondition request) {
          return selectByConditions().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer selectByConditions(com.xforceplus.ultraman.oqsengine.sdk.SelectByCondition) if possible.
         */

          public SingleResponseRequestBuilder<SelectByCondition, OperationResult> selectByConditions()

        {
          return clientState.withChannel( this::selectByConditionsRequestBuilder);
        }


        /**
         * For access to method metadata use the parameterless version of commit
         */
        public java.util.concurrent.CompletionStage<OperationResult> commit(TransactionUp request) {
          return commit().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer commit(com.xforceplus.ultraman.oqsengine.sdk.TransactionUp) if possible.
         */

          public SingleResponseRequestBuilder<TransactionUp, OperationResult> commit()

        {
          return clientState.withChannel( this::commitRequestBuilder);
        }


        /**
         * For access to method metadata use the parameterless version of rollBack
         */
        public java.util.concurrent.CompletionStage<OperationResult> rollBack(TransactionUp request) {
          return rollBack().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer rollBack(com.xforceplus.ultraman.oqsengine.sdk.TransactionUp) if possible.
         */

          public SingleResponseRequestBuilder<TransactionUp, OperationResult> rollBack()

        {
          return clientState.withChannel( this::rollBackRequestBuilder);
        }



        private static MethodDescriptor<TransactionUp, OperationResult> beginDescriptor =
          MethodDescriptor.<TransactionUp, OperationResult>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY



)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("EntityService", "begin"))
            .setRequestMarshaller(new ProtoMarshaller<TransactionUp>(TransactionUpSerializer))
            .setResponseMarshaller(new ProtoMarshaller<OperationResult>(OperationResultSerializer))
            .setSampledToLocalTracing(true)
            .build();

        private static MethodDescriptor<EntityUp, OperationResult> buildDescriptor =
          MethodDescriptor.<EntityUp, OperationResult>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY



)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("EntityService", "build"))
            .setRequestMarshaller(new ProtoMarshaller<EntityUp>(EntityUpSerializer))
            .setResponseMarshaller(new ProtoMarshaller<OperationResult>(OperationResultSerializer))
            .setSampledToLocalTracing(true)
            .build();

        private static MethodDescriptor<EntityUp, OperationResult> replaceDescriptor =
          MethodDescriptor.<EntityUp, OperationResult>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY



)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("EntityService", "replace"))
            .setRequestMarshaller(new ProtoMarshaller<EntityUp>(EntityUpSerializer))
            .setResponseMarshaller(new ProtoMarshaller<OperationResult>(OperationResultSerializer))
            .setSampledToLocalTracing(true)
            .build();

        private static MethodDescriptor<EntityUp, OperationResult> removeDescriptor =
          MethodDescriptor.<EntityUp, OperationResult>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY



)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("EntityService", "remove"))
            .setRequestMarshaller(new ProtoMarshaller<EntityUp>(EntityUpSerializer))
            .setResponseMarshaller(new ProtoMarshaller<OperationResult>(OperationResultSerializer))
            .setSampledToLocalTracing(true)
            .build();

        private static MethodDescriptor<EntityUp, OperationResult> selectOneDescriptor =
          MethodDescriptor.<EntityUp, OperationResult>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY



)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("EntityService", "selectOne"))
            .setRequestMarshaller(new ProtoMarshaller<EntityUp>(EntityUpSerializer))
            .setResponseMarshaller(new ProtoMarshaller<OperationResult>(OperationResultSerializer))
            .setSampledToLocalTracing(true)
            .build();

        private static MethodDescriptor<SelectByCondition, OperationResult> selectByConditionsDescriptor =
          MethodDescriptor.<SelectByCondition, OperationResult>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY



)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("EntityService", "selectByConditions"))
            .setRequestMarshaller(new ProtoMarshaller<SelectByCondition>(SelectByConditionSerializer))
            .setResponseMarshaller(new ProtoMarshaller<OperationResult>(OperationResultSerializer))
            .setSampledToLocalTracing(true)
            .build();

        private static MethodDescriptor<TransactionUp, OperationResult> commitDescriptor =
          MethodDescriptor.<TransactionUp, OperationResult>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY



)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("EntityService", "commit"))
            .setRequestMarshaller(new ProtoMarshaller<TransactionUp>(TransactionUpSerializer))
            .setResponseMarshaller(new ProtoMarshaller<OperationResult>(OperationResultSerializer))
            .setSampledToLocalTracing(true)
            .build();

        private static MethodDescriptor<TransactionUp, OperationResult> rollBackDescriptor =
          MethodDescriptor.<TransactionUp, OperationResult>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY



)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("EntityService", "rollBack"))
            .setRequestMarshaller(new ProtoMarshaller<TransactionUp>(TransactionUpSerializer))
            .setResponseMarshaller(new ProtoMarshaller<OperationResult>(OperationResultSerializer))
            .setSampledToLocalTracing(true)
            .build();
        

      /**
       * Initiates a shutdown in which preexisting and new calls are cancelled.
       */
      public java.util.concurrent.CompletionStage<akka.Done> close() {
        return clientState.closeCS() ;
      }

     /**
      * Returns a CompletionState that completes successfully when shutdown via close()
      * or exceptionally if a connection can not be established after maxConnectionAttempts.
      */
      public java.util.concurrent.CompletionStage<akka.Done> closed() {
        return clientState.closedCS();
      }
  }

}



